/**
 * Utilitaire pour envoyer des requ√™tes asynchrones au webhook
 */

import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

const WEBHOOK_SECRET_KEY = process.env.WEBHOOK_SECRET_KEY || 'default-webhook-secret-key';
const API_BASE_URL = process.env.API_BASE_URL || `http://localhost:${process.env.PORT || 3000}`;

/**
 * Envoie une requ√™te asynchrone vers le webhook de calcul des tokens
 * Cette fonction n'attend pas la r√©ponse et ne bloque pas le processus principal
 * @param {number} delay - D√©lai en millisecondes avant d'envoyer la requ√™te (d√©faut: 1000ms)
 */
export async function triggerWebhookAsync(delay = 1000) {
  // Programmer l'envoi de la requ√™te de mani√®re asynchrone
  setTimeout(async () => {
    try {
      console.log('üîÑ D√©clenchement asynchrone du webhook de calcul des tokens...');
      
      const response = await axios.post(`${API_BASE_URL}/webhook/calculate-tokens`, {}, {
        headers: {
          'X-Webhook-Secret': WEBHOOK_SECRET_KEY,
          'Content-Type': 'application/json'
        },
        timeout: 60000, // 60 secondes de timeout
        // Ne pas suivre les redirections automatiquement
        maxRedirects: 0
      });
      
      if (response.data.success) {
        console.log(`‚úÖ Webhook ex√©cut√© avec succ√®s: ${response.data.stats.processed} requ√™tes trait√©es, ${response.data.stats.errors} erreurs`);
      } else {
        console.log(`‚ö†Ô∏è Webhook termin√© avec des probl√®mes: ${response.data.message}`);
      }
      
    } catch (error) {
      if (error.response) {
        // Le serveur a r√©pondu avec un code d'erreur
        if (error.response.status === 409) {
          console.log('‚ÑπÔ∏è Webhook d√©j√† en cours d\'ex√©cution, requ√™te ignor√©e');
        } else {
          console.error(`‚ùå Erreur webhook (${error.response.status}): ${error.response.data?.message || error.response.statusText}`);
        }
      } else if (error.code === 'ECONNREFUSED') {
        console.error('‚ùå Impossible de joindre le webhook (serveur non accessible)');
      } else if (error.code === 'ETIMEDOUT') {
        console.error('‚ùå Timeout lors de l\'appel au webhook');
      } else {
        console.error('‚ùå Erreur lors de l\'appel asynchrone au webhook:', error.message);
      }
    }
  }, delay);
  
  // Cette fonction retourne imm√©diatement sans attendre l'ex√©cution du webhook
  console.log(`‚è≤Ô∏è Webhook programm√© pour ex√©cution dans ${delay}ms`);
}

/**
 * Version alternative utilisant fetch au lieu d'axios
 * Peut √™tre utile si axios n'est pas disponible
 */
export async function triggerWebhookAsyncFetch(delay = 1000) {
  setTimeout(async () => {
    try {
      console.log('üîÑ D√©clenchement asynchrone du webhook de calcul des tokens (fetch)...');
      
      const response = await fetch(`${API_BASE_URL}/webhook/calculate-tokens`, {
        method: 'POST',
        headers: {
          'X-Webhook-Secret': WEBHOOK_SECRET_KEY,
          'Content-Type': 'application/json'
        },
        signal: AbortSignal.timeout(60000) // 60 secondes de timeout
      });
      
      const data = await response.json();
      
      if (response.ok && data.success) {
        console.log(`‚úÖ Webhook ex√©cut√© avec succ√®s: ${data.stats.processed} requ√™tes trait√©es, ${data.stats.errors} erreurs`);
      } else {
        console.log(`‚ö†Ô∏è Webhook termin√© avec des probl√®mes (${response.status}): ${data.message || response.statusText}`);
      }
      
    } catch (error) {
      if (error.name === 'AbortError') {
        console.error('‚ùå Timeout lors de l\'appel au webhook');
      } else {
        console.error('‚ùå Erreur lors de l\'appel asynchrone au webhook:', error.message);
      }
    }
  }, delay);
  
  console.log(`‚è≤Ô∏è Webhook programm√© pour ex√©cution dans ${delay}ms`);
}
