/**
 * Script pour tester le webhook de calcul des tokens
 * 
 * Ce script teste l'endpoint webhook /webhook/calculate-tokens qui permet de
 * traiter les requ√™tes avec le statut 'ready_to_compute' et calculer leurs tokens.
 *
 * Usage:
 * 1. Configurer les variables d'environnement (WEBHOOK_SECRET_KEY, API_BASE_URL si non localhost:3000)
 * 2. D√©marrer le serveur: npm run dev
 * 3. Ex√©cuter: node examples/test-webhook.js
 */

import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000';
const WEBHOOK_SECRET = process.env.WEBHOOK_SECRET_KEY || 'default-webhook-secret-key';

// Configuration axios pour le webhook
const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'X-Webhook-Secret': WEBHOOK_SECRET,
    'Content-Type': 'application/json'
  },
  timeout: 60000 // 60 secondes de timeout (le webhook peut prendre du temps)
});

/**
 * Teste l'endpoint webhook de calcul des tokens
 */
async function testWebhookCalculateTokens() {
  console.log('üîß Test du webhook de calcul des tokens');
  console.log('='.repeat(50));
  
  try {
    console.log('üì§ Envoi de la requ√™te webhook...');
    const startTime = Date.now();
    
    const response = await api.post('/webhook/calculate-tokens');
    
    const duration = Date.now() - startTime;
    
    console.log('‚úÖ R√©ponse re√ßue avec succ√®s !');
    console.log(`‚è±Ô∏è  Dur√©e d'ex√©cution: ${duration}ms`);
    console.log('üìä R√©ponse:');
    console.log(JSON.stringify(response.data, null, 2));
    
    if (response.data.success) {
      console.log('');
      console.log('üìà Statistiques:');
      console.log(`   ‚Ä¢ Requ√™tes trait√©es: ${response.data.stats.processed}`);
      console.log(`   ‚Ä¢ Erreurs: ${response.data.stats.errors}`);
      
      if (response.data.stats.processed === 0) {
        console.log('‚ÑπÔ∏è  Aucune requ√™te √† traiter (aucune requ√™te avec le statut "ready_to_compute")');
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test du webhook:');
    
    if (error.response) {
      // La requ√™te a √©t√© faite et le serveur a r√©pondu avec un code d'erreur
      console.error(`   Status: ${error.response.status}`);
      console.error(`   Message: ${error.response.data?.message || error.response.statusText}`);
      console.error('   R√©ponse compl√®te:', JSON.stringify(error.response.data, null, 2));
      
      if (error.response.status === 401) {
        console.error('üîë V√©rifiez la cl√© secr√®te du webhook (WEBHOOK_SECRET_KEY)');
      } else if (error.response.status === 409) {
        console.error('‚ö†Ô∏è  Une autre instance du traitement est d√©j√† en cours');
      }
    } else if (error.request) {
      // La requ√™te a √©t√© faite mais aucune r√©ponse n'a √©t√© re√ßue
      console.error('   Aucune r√©ponse re√ßue du serveur');
      console.error('   V√©rifiez que le serveur est d√©marr√© sur:', API_BASE_URL);
    } else {
      // Erreur lors de la configuration de la requ√™te
      console.error('   Erreur de configuration:', error.message);
    }
  }
}

/**
 * Teste l'authentification du webhook avec une mauvaise cl√©
 */
async function testWebhookAuth() {
  console.log('');
  console.log('üîê Test de l\'authentification webhook (avec mauvaise cl√©)');
  console.log('='.repeat(50));
  
  try {
    const badApi = axios.create({
      baseURL: API_BASE_URL,
      headers: {
        'X-Webhook-Secret': 'wrong-secret-key',
        'Content-Type': 'application/json'
      },
      timeout: 10000
    });
    
    const response = await badApi.post('/webhook/calculate-tokens');
    console.log('‚ö†Ô∏è  R√©ponse inattendue (devrait √™tre une erreur 401):', response.data);
    
  } catch (error) {
    if (error.response && error.response.status === 401) {
      console.log('‚úÖ Authentification √©chou√©e comme attendu (401)');
      console.log(`   Message: ${error.response.data?.message}`);
    } else {
      console.error('‚ùå Erreur inattendue:', error.message);
    }
  }
}

/**
 * Teste l'endpoint sans en-t√™te d'authentification
 */
async function testWebhookNoAuth() {
  console.log('');
  console.log('üö´ Test sans authentification');
  console.log('='.repeat(50));
  
  try {
    const noAuthApi = axios.create({
      baseURL: API_BASE_URL,
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 10000
    });
    
    const response = await noAuthApi.post('/webhook/calculate-tokens');
    console.log('‚ö†Ô∏è  R√©ponse inattendue (devrait √™tre une erreur 401):', response.data);
    
  } catch (error) {
    if (error.response && error.response.status === 401) {
      console.log('‚úÖ Acc√®s refus√© comme attendu (401)');
      console.log(`   Message: ${error.response.data?.message}`);
    } else {
      console.error('‚ùå Erreur inattendue:', error.message);
    }
  }
}

/**
 * Fonction principale pour ex√©cuter tous les tests
 */
async function runTests() {
  console.log('üß™ Tests du webhook de calcul des tokens');
  console.log('üîó API Base URL:', API_BASE_URL);
  console.log('üîë Webhook Secret:', WEBHOOK_SECRET.substring(0, 8) + '...');
  console.log('');
  
  // Test principal
  await testWebhookCalculateTokens();
  
  // Tests d'authentification
  await testWebhookAuth();
  await testWebhookNoAuth();
  
  console.log('');
  console.log('üèÅ Tests termin√©s');
}

// Ex√©cuter les tests si le script est appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  runTests().catch(console.error);
}

export { testWebhookCalculateTokens, testWebhookAuth, testWebhookNoAuth };
